/* TASK 1

Поднимаясь по лестнице
Вы поднимаетесь по лестнице. Требуется сделать n шагов, чтобы достичь вершины. На каждом шагу можно подняться либо на 1 ступеньку, либо на 2 ступеньки. 
Сколькими различными способами вы можете подняться на вершину? Пример: Ввод: n = 3. Вывод: 3. Объяснение: Есть три способа подняться на вершину.
1. 1 шаг + 1 шаг + 1 шаг 2. 1 шаг + 2 шага 3. 2 шага + 1 шаг
Sample Input 1: 2 Sample Output 1: 2
*/


var climbStairs = function(n) {
    if (n < 1) return 1
    let x = [1, 2]
    for(let i = 2; i <= n; i++) {
        x[i] = x[i-1] + x[i-2]
    }
    return x[n-1]
}
let n = Number(prompt())
console.log(climbStairs(n))




/* TASK 2
Содержит дубликат
Для заданного целочисленного массива numsвозвращайтеtrue, если какое-либо значение встречается в массиве не менее двух раз, и возвращайте false, когда все элементы различны.
Ограничения: 1 <= nums.length <= 105; -109 <= nums[i] <= 109
Sample Input 3: [1,1,1,3,3,4,3,2,4,2]
Sample Output 3: true
*/


var containsDuplicate = function(nums) {
    let a = nums.length - 1
    let t = 0
    for(let i = 0; i < a; i++) {
        if (nums.filter((elem) => elem === nums[i]).length > 1) {
            return true
            }
        }
    return false
}
let nums = JSON.parse(prompt())
console.log(containsDuplicate(nums))




/* TASK 3
Сравнение строк с откатом
Даны две строки sи t. Верните true, если они равны. '#'означает символ возврата, который удаляет предыдущий символ из строки.
Обратите внимание, можно удалить пустой текст, и текст останется пустым. 
Пример 1: Ввод: s = "ab#c", t = "ad#c" Вывод: true. Объяснение: И s, и t становятся "ac".
Пример 2: Ввод: s = "ab##", t = "c#d#". Вывод: true. Объяснение: И s, и t становятся "".
Ограничения: 1 <= s.length, t.length <= 200. s и t содержат только строчные буквы и '#'символы.
*/


var backspaceCompare = function(s, t) {
    while(s.indexOf('#') > 0){
        let a = s.indexOf('#')
        s = s.slice(0, a-1) + s.slice(a+1)
    }
    while(t.indexOf('#') > 0){
        let a = t.indexOf('#')
        t = t.slice(0, a-1) + t.slice(a+1)
    }
    return s === t
}
let s = prompt()
let t = prompt()
console.log(backspaceCompare(s, t))




/* TASK 4
Сложить цифры
Дано натуральное число num, сложите все его цифры и получите число, затем повторите, пока в результате не останется только одна цифра, верните ее.
Пример 1. Ввод: число = 38. Вывод: 2. Объяснение: Процесс 38 --> 3 + 8 --> 11  11 --> 1 + 1 --> 2. Поскольку 2 состоит из одной цифры, возвращаем ее.
Ограничения: 0 <= num <= 231 - 1
Sample Input 1: 38 Sample Output 1: 2
*/


var addDigits = function(num) {
    while(num > 9){
        num = (''+num).split('').map(Number).reduce(function (a, b) {
            return a + b
        }, 0)
    }
    return num
}
let n = Number(prompt())
console.log(addDigits(n))




/* TASK 5
Переключатель ламп
Есть n лампочек, которые изначально выключены. Сначала вы включаете все лампочки, затем выключаете каждую вторую лампочку.
В третьем раунде вы переключаете (включается, если выключена, или выключается, если включена) каждую третью лампочку. 
Для ith раунда вы переключаете каждую i лампочку. В раунде nth вы переключаете только последнюю лампочку.
Вернуть количество лампочек, которые горят после n раундов. Ограничения: 0 <= n <= 109.
Ввод: n = 3 Вывод: 1
Объяснение: Сначала три лампочки [выключены, выключены, выключены].
После первого раунда три лампочки [горит, горит, горит].
После второго раунда три лампочки [включены, выключены, включены].
После третьего раунда три лампочки [включены, выключены, выключены].
Поэтому вы должны вернуть 1, потому что горит только одна лампочка.
*/


var bulbSwitch = function(n) {
    return Math.floor(Math.sqrt(n))
    
    /* Этот вариант не прошёл по времени:
    let arr = Array(n).fill(false)
    for(let round = 1; round <= n; round++) {
        for(let i = round-1; i < n; i+=round) {
            arr[i] = !arr[i]
        }
    }
    return arr.filter(Boolean).length
    */
}

let n = Number(prompt())
console.log(bulbSwitch(n))




/* TASK 6
Повторения в строке
Дана строка s, проверьте может ли она быть построена из ее подстроки путем копирования этой подстроки.
Пример 1: Ввод: s = "abab". Вывод: true. Объяснение: Это дважды подстрока "ab".
Пример 2: Ввод: s = "aba". Вывод: false. 
Пример 3: Ввод: s = "abcabcabcabc". Вывод: true. Объяснение: Это либо четыре раза "abс" или два раза "abcabc".
Ограничения: 1 <= s.length <= 10⁴. s состоит только из строчных английских букв.
*/


var repeatedSubstringPattern = function(s) {
    let length = Math.floor(s.length / 2)
    
    for(let i = 1; i <= length; i++) {
        if (s.length % i === 0) {
            let substr = s.slice(0, i)
            if (substr.repeat(s.length / i) === s) {
                return true
            }
        }
    }
    return false
}
let s = prompt()
console.log(repeatedSubstringPattern(s))
