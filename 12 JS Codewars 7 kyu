/* TASK 1
Наибольший общий делитель (НОД)
Найдите наибольший общий делитель двух положительных целых чисел. Числа могут быть большими, подумайте над хорошим решением.
Значения x и y всегда больше или равны 1, так что наибольший общий делитель будет всегда натуральным числом больше или равным 1.
Sample Input: 30 12 Sample Output: 6
*/


function mygcd(x,y) {
    let rem
    while(y!=0) {
        rem = x % y
        x = y
        y = rem
    }
    return x
}
let [x, y] = prompt().split(' ').map(Number)
console.log(mygcd(x, y))



/* TASK 2
Обесглась троллей
Тролли атакуют раздел комментариев!
Обычный способ справиться с этой ситуацией — удалить все гласные из комментариев троллей, тем самым нейтрализовав угрозу.
Напишите функцию, которая принимает строку и возвращает новую строку, в которой удалены все гласные.
Например, строка This website is for losers LOL! станет Ths wbst s fr lsrs LL!.
Примечание: здесь y не считается гласной.
Входные данные Cтрока на английском языке.
Выходные данные Исходная строка, не содержащая английских гласных букв "A", "E", "I", "O", "U" (в этой задаче "Y" считается согласной).
*/


function disemvowel(str) {
    return str.replace( /[aAeEiIoOuU]/g, '')
}
let str = prompt()
console.log(disemvowel(str))




/* TASK 3
Кошки и полки
Несколько полок расположены одна над другой в шахматном порядке.
Кошка не может запрыгнуть на полку прямо над головой, но может запрыгнуть на одну или две полки выше в другом ряду.
                 ┌────────┐
                 │-6------│
                 └────────┘
┌────────┐       
│------5-│        
└────────┘  ┌─────► OK!
            │    ┌────────┐
            │    │-4------│
            │    └────────┘
┌────────┐  │
│------3-│  │     
BANG!────┘  ├─────► OK! 
  ▲  |\_/|  │    ┌────────┐
  │ ("^-^)  │    │-2------│
  │ )   (   │    └────────┘
┌─┴─┴───┴┬──┘
│------1-│
└────────┘
Найдите минимальное количество прыжков до нужной полки. Пример, чтобы начать с 1 и закончить 5 нужно2 прыжка (1 => 4 => 5) или (1 => 2 => 5).
Входные данные: Начальный и конечный номера полок. Номера -- положительные целые числа, первый не больше последнего. Выходные данные: Минимальное число прыжков.
*/


function solution(start, finish) {
    let ans = 0
    while(start <= finish - 3){
            start += 3
            ans += 1
    }
    return  start === finish ? ans : start + 1 === finish ? ans + 1 : ans + 2
}
let [start, finish] = prompt().split(' ').map(Number)
console.log(solution(start, finish))




/* TASK 4
Чет или нечет?! Определите!
По заданному числу Nопределить, является ли сумма N последовательных чисел четной или нечетной.
Если сумма определенно является нечетным числом, вернуть Odd. Если сумма определенно является четным числом, вернуть Even.
Если сумма может быть как нечетной, так и четной (в зависимости от того, какое первое число вы выберете), вернуть Either.
Примеры
oddOrEven(1)должен вернуть Either, потому что сумма может быть четной или нечетной.
oddOrEven(6)должен возвращать Odd, потому что 6последовательных чисел содержат 3нечетных и 3четных числа, поэтому их сумма всегда нечетна.
oddOrEven(8)должен возвращать Even, потому что 8последовательных чисел содержат 4нечетных и 4четных числа, поэтому их сумма всегда четна.
Замечание const ODD = "Odd"; const EVEN = "Even"; const EITHER = "Either"; уже предопределены.
*/


function oddOrEven(n) {
    if (n % 4 === 0) {
        n = EVEN
    }else if(n % 4 === 2) {
        n = ODD
    }else
        n = EITHER
  return n
}
let N = Number(prompt());
console.log(oddOrEven(N));




/* TASK 5
Минимальный периметр прямоугольника
Прямоугольник можно определить двумя факторами: высотой и шириной.
Площадь определяется как произведение: высота * ширина.
Периметр — это сумма четырех ребер: высота + высота + ширина + ширина.
Можно создавать прямоугольники одинаковой площади, но разного периметра. 
Например, учитывая площадь 45, возможные высоты, ширины и результирующие периметры будут:
(1, 45) = 92
(9, 5) = 28
(15, 3) = 36
Обратите внимание, что (6, 7.5) также имеет площадь 45, но его ширина не является целой.
Напишите функцию, которая по заданной площади возвращает наименьший возможный периметр прямоугольника с целыми длинами сторон.
Sample Input 1: 45 Sample Output 1: 28
*/


function minimumPerimeter(area) {
    let x = Math.sqrt(area) | 0
    while (area % x) {
        x--
    }
    return 2 * (x + area / x)
}
let area = Number(prompt())
console.log(minimumPerimeter(area))




/* TASK 6
Счет Scrabble
Напишите программу, которая по заданному слову вычисляет стоимость этого слова в Scrabble.
Буквенные значения
Letter                           Value
A, E, I, O, U, L, N, R, S, T       1
D, G                               2
B, C, M, P                         3
F, H, V, W, Y                      4
K                                  5
J, X                               8
Q, Z                               10
Таблица со знаниями уже загружена в переменную $dict, например: $dict["E"] == 1.
Пустая строка должна возвращать 0. Строка может содержать пробелы и буквы в верхнем и нижнем регистре, считать нужно только баллы за латинские буквы в этой строке.
""            --> 0
"STREET"      --> 6
"st re et"    --> 6
"ca bba g  e" --> 14
*/


function scrabbleScore(str){
    str = str.toUpperCase().replaceAll(' ', '')
    let x = 0
    let i = str.length - 1
    while(i >= 0) {
        x += $dict[str[i]]
        i--
    }
    return x
}
let str = prompt()
console.log(scrabbleScore(str))




/* TASK 7
Искусство Кубика Рубика
Закончите функцию, которая возвращает строку, при печати напоминающую Кубик Рубика. Функция cube имеет один целочисленный параметр n размера кубика.
Например, для cube(3) функция возвращает строку
  /\_\_\_\
 /\/\_\_\_\
/\/\/\_\_\_\
\/\/\/_/_/_/
 \/\/_/_/_/
  \/_/_/_/
Справа от краев кубика нет пробелов, и n может быть больше или равен единице.
*/


function cube(n) {
    let strCube = ''
    let t = 0
    for(let i = 1; i <= n; i++) {
        strCube += '\n'.repeat(t) + ' '.repeat(n-i) + '/\\'.repeat(i) + '_\\'.repeat(n)
        t = 1
    }
    for(let i = n; i > 0; i--) {
        strCube += '\n'.repeat(t) + ' '.repeat(n-i) + '\\/'.repeat(i) + '_/'.repeat(n)
    }
    return strCube
}
let n = Number(prompt())
console.log(cube(n))




/* TASK 8
Перпендикулярные линии
На вход дано число n, количество линий. Необходимо вывести максимальное количество перпендикуляров, которые можно сделать используя эти линии. 
Перпендикуляр -- это пересечение линий, образующее угол 90 градусов. n больше или равно 0.
Sample Input 1: 2 Sample Output 1: 1 Sample Input 2: 3 Sample Output 2: 2
*/


function maxBisectors(n) {
    return Math.floor(n/2) * Math.floor(n/2) + Math.floor(n/2) * (n % 2)
}
let n = Number(prompt())
console.log(maxBisectors(n))




/* TASK 9
Бинарный sXORe
По данному числу n определите его sXORe, равный 0 XOR 1 XOR 2 ... XOR n, где XOR битовый XOR оператор.
Напишите функцию, которая получает n и возвращает sXORe.
Examples
n	sXORe n
0	0
1	1
50	51
1000000	1000000
*/


const sxore = function(n){
    let sXORe = 0
    for(let s = 1; s<=n; s++) {
       sXORe = sXORe ^ s
    }
    return sXORe

}
let n = Number(prompt())
console.log(sxore(n))




/* TASK 10
Произведение букв
У меня четыре положительных целых числа, A, B, C и D, где A < B < C < D. Входные данные представляют собой список целых чисел A, B, C, D, AxB, BxC, CxD, DxA в некотором порядке. 
Ваша задача — вернуть значение D. Примеры
alphabet([2,3,4,1,12,6,2,4]) === 4
alphabet([2,6,7,3,14,35,15,5]) === 7
alphabet([20,10,6,5,4,3,2,12]) === 5
alphabet([2,6,18,3,6,7,42,14]) === 7
alphabet([7,96,8,240,12,140,20,56]) === 20
alphabet([20,30,6,7,4,42,28,5]) === 7
Sample Input: [2,3,4,1,12,6,2,4] Sample Output: 4
*/


function alphabet(ns) {
    let ab = (a, b) => a - b
    ns.sort(ab)
    let a = ns[5]/ns[0]
    for (let i = 0; i < ns.length; i++) {
        if (ns[i] === a) {
            return a
        }
    }
    return ns[6]/ns[0]
}
let ns = JSON.parse(prompt())
console.log(alphabet(ns))




/* TASK 11
21 палочка Игра
В куче лежит 21 палочка. Игроки по очереди берут 1, 2 или 3 палочки. Выигрывает тот, кто возьмет последнюю палочку. Например:
21 палочка в куче
Bob берет 2  -->  19 палочек осталось
Jim берет 3  -->  16 палочек
Bob берет 3  -->  13 палочек
Jim берет 1  -->  12 палочек
Bob берет 2  -->  10 палочек
Jim берет 2  -->   8 палочек
Bob берет 3  -->   5 палочки
Jim берет 3  -->   2 палочки
Bob берет 2  -->  Bob победил!
Задание
Создайте робота, который будет всегда побеждать в игре. Робот всегда ходит первым. Функция должна принимать целое число и возвращать 1, 2, или 3.
Примечание. Ввод всегда будет действительным (положительное целое число).
*/


function makeMove(sticks) {
    if (sticks === 21) return 1
    if (sticks % 4 === 0) return 1
    if (sticks % 4 != 0) return sticks % 4
}




/* TASK 12
Объединение перекрывающихся строк
В этой задаче необходимо объединить вместе две строки. Для этого нужно соединить конец первой строки и начало второй, когда они совпадают.
"abcde" + "cdefgh" => "abcdefgh"
"abaab" + "aabab" => "abaabab"
"abc" + "def" => "abcdef"
"abc" + "abc" => "abc"
Примечание. Алгоритм должен всегда использовать наибольшее возможное перекрытие. "abaabaab" + "aabaabab" должен быть "abaabaabab", а не "abaabaabaabab"
Sample Input 1: abcde cdefgh Sample Output 1: abcdefgh
*/


function mergeStrings(first, second){
    let f = first.length
    if (first === second) return first
    for(let i = 0; i <= f; i++) {
        if (second.startsWith(first.slice(i)) === true) return first + second.slice(f-i)
    }
    return first+second
}
let first = prompt()
let second = prompt()
console.log(mergeStrings(first, second))




/* TASK 13
Поиск ферзей на доске
Задача найти максимальное количество ферзей, которое можно поставить на шахматную доску так, чтобы осталось одно единственное небитое поле, то есть такое, которому не угрожает 
ни один ферзь на доске. 
Ввод: Функция queens(n) принимает размер шахматной доски. 𝑛∈𝑍, поэтому он может быть отрицательным, а значения могут доходить до 141 в 1000 степени.
Вывод: Максимальное количество ферзей, чтобы оставить одно не битое поле. 
Вернуть 0, если n отрицательный. Примеры 𝑛=4→6 ферзей n=5→12 ферзей
Примеры из тестов: queens(0n) === 0n; queens(1n) === 0n; queens(2n) === 0n; queens(3n) === 2n; queens(4n) === 6n; queens(5n) === 12n; queens(6n) === 20n; queens(33n) === 992n
*/


function queens(n){
    return n < 3 ? 0 : n === 3 ? 2 : n-1n + (n-2n) * (n-3n) + n-3n
}
let n = BigInt(prompt())
console.log(queens(n))
