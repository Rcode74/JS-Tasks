/* TASK 27 Уравнение. 
Решить в целых числах уравнение ax + b = 0. Входные данные: Вводятся 2 целых числа: a и b.
Выходные данные: Необходимо вывести все решения, если их число конечно, “NO” (без кавычек), если решений нет, и “INF” (без кавычек), если решений бесконечно много.
Sample Input 1: 6 -2  Sample Output 1: NO Sample Input 2: 1 1 Sample Output 2: -1 */

//var 1
let a = Number(prompt())
let b = Number(prompt())
let x = (0 - b) / a
let z = +(Number.isInteger ((0 - b) / a))

if (a === 0 & b === 0) {
    console.log('INF')
}else if (a  === 0 || z === 0) {
    console.log('NO')
}else if (z === 1) {
    console.log(x)
}



//var 2
let a = Number(prompt())
let b = Number(prompt())

if (a === 0 & b === 0) {
    console.log('INF')
}else if (a  === 0 || b % a != 0) {
    console.log('NO')
}else
    console.log((0 - b) / a)




/* TASK 28 Сложное уравнение. 
Решить в целых числах уравнение ax+b/cx+d = 0. Входные данные: Вводятся 4 числа: a, b, c и d; c и d не равны нулю одновременно.
Выходные данные: Необходимо вывести все целочисленные решения, если их число конечно, “NO” (без кавычек), если целочисленных решений нет, и “INF” (без кавычек), 
если их бесконечно много. */


//var 1
let [a, b, c, d] = [...Array(4)].map(prompt).map(Number)
let x = Math.abs(b / 2)
let xx = - b / a
let ch = a * x + b
let zn = c * x + d
let rez = ch / zn

if (a === 0 && c === 0 && b === 0 || a === 0 && b === 0 && d === 0) {
    console.log('INF')
}else if (a === d || zn === 0 || b === d || a === b && c === d) {
    console.log('NO')
}else if (a === c) {
    let xxx = ~b+1
    console.log(xxx)
}else
    console.log(Number.isInteger(xx+0) ? xx+0 : 'NO')


//var 2, доработал
let [a, b, c, d] = [...Array(4)].map(prompt).map(Number)
let x = Math.abs(b / 2)
let xx = - b / a
let zn = c * x + d

if (a === 0 && c === 0 && b === 0 || a === 0 && b === 0 && d === 0) {
    console.log('INF')
}else if (a === d || zn === 0 || b === d || a === b && c === d) {
    console.log('NO')
}else
    console.log(Number.isInteger(xx+0) ? xx+0 : 'NO')


//var 3, ещё доработал
let [a, b, c, d] = [...Array(4)].map(prompt).map(Number)
let x = - b / a

if (a === b && b === c || a === b && b === d) {
    console.log('INF')
}else
    console.log(a === b && c === d ? 'NO' : Number.isInteger(x+0) ? x+0 : 'NO')


//var 4, ещё доработал
let [a, b, c, d] = [...Array(4)].map(prompt).map(Number)
let x = - b / a

if (a === b && b === c || a === b && b === d) {
    console.log('INF')
}else
    console.log(a === b && c === d || !Number.isInteger(x+0) ? 'NO' : x+0)




/* TASK 29 Квадратное уравнение. 
Даны действительные числа a, b, c. Найдите все решения квадратного уравнения 𝑎𝑥(степень2)+𝑏𝑥+𝑐=0
Входные данные: Даны три действительных числа, a не равно 0. Выходные данные: Выведите два действительных числа в любом порядке, если уравнение имеет два корня, 
одно действительное число – при наличии одного корня. При отсутствии действительных корней ничего выводить не нужно. Sample Input: 1 0 0 Sample Output: 0 */


let [a, b, c] = [...Array(3)].map(prompt).map(Number)

let discriminant = b ** 2 - 4 * a * c

if (discriminant > 0) {
    let x1 = (-b + Math.sqrt(discriminant)) / (2 * a)
    let x2 = (-b - Math.sqrt(discriminant)) / (2 * a)
    console.log(x1, x2)
}else if (discriminant === 0) {
    let x = -b / (2 * a)
    console.log(x+0)
}




/* TASK 30 Координаты соседей
Ввод и вывод данных производятся через стандартные потоки ввода-вывода. Для клетки с координатами (x, y) в таблице размером M × N выведите координаты ее соседей. 
Соседними называются клетки, имеющие общую сторону. Входные данные: Даны натуральные числа M, N, x, y (1 ≤ x ≤ M ≤ 109, 1 ≤ y ≤ N ≤ 109).
Выходные данные: В выходной файл выведите пары координат соседей этой клетки в произвольном порядке.
Обратите внимание на формат входных данных. На первой строке даны M, N, на второй строке x, y.
Sample Input:
3 3
2 2
Sample Output:
1 2
2 1
3 2
2 3 */


//var 1
let MN = prompt().split(' ').map(Number)
let xy = prompt().split(' ').map(Number)
let M = MN[0]
let N = MN[1]
let x = xy[0]
let y = xy[1]

let l = [x-1, y]
let r = [x+1, y]
let u = [x, y-1]
let d = [x, y+1]


for (let i = 4; i > 0; i--) {
    if (l[0] >= 1 && l[0] <= M && l[1] >= 1 && l[1] <= N) {
        console.log(
`${x-1} ${y}
${x+1} ${y}
${x} ${y-1}
${x} ${y+1}`
)
    }
}
    //return i >= 1 && i <= m && j >= 1 && j <= n;


//var 2
const input1 = prompt('Введите два натуральных числа через пробел (m и n)').split(' ').map(Number);
const input2 = prompt('Введите два натуральных числа через пробел (x и y)').split(' ').map(Number);

const m = input1[0];
const n = input1[1];
const x = input2[0];
const y = input2[1];

function isValidCell(i, j) {
    return i >= 1 && i <= m && j >= 1 && j <= n;
}

function printNeighbours(i, j) {
    const neighbours = [
        [i-1, j], // левая клетка
        [i, j-1], // верхняя клетка
        [i+1, j], // правая клетка
        [i, j+1]  // нижняя клетка
    ];

    for (let neighbour of neighbours) {
        if (isValidCell(neighbour[0], neighbour[1])) {
            console.log(neighbour[0] + ' ' + neighbour[1]);
        }
    }
}

printNeighbours(x, y);
